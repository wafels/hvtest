<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * SSWIDL Science Data Download Script Generator
 *
 * PHP version 5
 *
 * @category Helper
 * @package  Helioviewer
 * @author   Jeff Stys <jeff.stys@nasa.gov>
 * @license  http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License 1.1
 * @link     http://launchpad.net/helioviewer.org
 *
 */

require_once "SciScript.php";

class Helper_SSWIDL extends Helper_SciScript {

    function buildScript() {

        $filename   = $this->_getScriptFilename();
        $provenance = $this->_getProvenanceComment();

        $DataSnippet  = $this->_getSDOSnippet();
        $DataSnippet .= $this->_getEITSnippet();
        $DataSnippet .= $this->_getLASCOSnippet();
        $DataSnippet .= $this->_getMDISnippet();
        $DataSnippet .= $this->_getSTEREOSnippet();
        $DataSnippet .= $this->_getSWAPSnippet();
        $DataSnippet .= $this->_getYohkohSnippet();
        $DataSnippet .= $this->_getHEKSnippet();

        $code = <<<EOD
;
; Solarsoft data download script
;
;    {$filename}
;
; NOTE: this script may make use of the SDO cutout service called via
; a Solarsoft command. To use this command properly, you MUST enter
; YOUR email address when prompted in order to receive the output.
;
;
; (1) Helioviewer provenance information
; --------------------------------------
{$provenance}
;
; (2) The Solarsoft environment and commands used to find and acquire data
; ------------------------------------------------------------------------
;
; This script requires an up-to-date installation of Solarsoft with
; the ONTOLOGY package installed. Solarsoft requires that you have
; access to an installation of IDL.
;
; This script is provided AS-IS. NOTE: It may require editing for it to
; work on your local system. Also, many of the commands included here
; have more sophisticated options that can be used to optimize your ability
; to acquire the relevant data. Please consult the relevant documentation
; for further information.
;
; To find out more about acquiring solar data, please consult
; the following links:
;
; Installing and upgrading Solarsoft
; http://www.lmsal.com/solarsoft/ssw_install_howto.html
;
; SDO data analysis, Solarsoft, VSO and AIA cutout service
; https://www.lmsal.com/sdodocs/doc/dcur/SDOD0060.zip/zip/entry/
;
; VSO
; http://docs.virtualsolar.org/wiki/VsoIDL/VsoSearch
;
; The commands,
;
; IDL> doc_menu,<IDL program name>
;
; or
;
; IDL> xdoc
;
; can also be used to find out more about each command in the script below.
;
;
; (3) Executing the script
; ------------------------
;
; To run this script, place it in a directory that your IDL session is
; aware of and type
;
; IDL> .run {$filename}
;
; or preprend the script with a path to the script, for example,
;
; IDL> .run path/to/script/{$filename}
;
; Data will be downloaded to your current working directory.
;
;
; (4) Script
; ----------
EOD;

        if ( !is_null($this->_tend) ) {
            $code .= <<<EOD

;
; Search for data in the following date time range
;

tstart = '{$this->_tstart}'
tend   = '{$this->_tend}'
EOD;
        }

        $code .= <<<EOD
{$DataSnippet}
;
; (5) Script ends
; ---------------
;
END
EOD;

        $this->_printScript($filename, $code);
    }

    private function _getScriptFilename() {
        date_default_timezone_set('UTC');

        $temp = str_replace( Array('-', ':', ' UTC', ' '),
                             Array(',', ',', '',     ','),
                             $this->_tstart );
        list($Y,$m,$d,$H,$i,$s) = explode(',',$temp);
        $str = date('Ymd_His', mktime($H,$i,$s,$m,$d,$Y) );

        if ( !is_null($this->_tend) ) {

            $temp = str_replace( Array('-', ':', ' UTC', ' '),
                                 Array(',', ',', '',     ','),
                                 $this->_tend );
            list($Y,$m,$d,$H,$i,$s) = explode(',',$temp);
            $end   = date('Ymd_His', mktime($H,$i,$s,$m,$d,$Y) );

            $str .= '__'.$end;
        }

        return 'helioviewer_sswidl_'.$str.'.pro';
    }

    private function _getProvenanceComment() {
        require_once "src/Helper/DateTimeConversions.php";

        $now = str_replace(Array('T','.000Z'),
                           Array(' ',' UTC'),
                           getUTCDateString());

        $comment = "; Automatically generated by Helioviewer.org on $now.\n"
                 . "; This script may use the Virtual Solar Observatory (VSO),"
                 .    " the SDO cutout\n"
                 . "; service, and/or the Heliophysics Event Knowledgebase "
                 .    "(HEK; www.lmsal.com/hek)\n"
                 . "; service ";

        // Movie id?
        if ( array_key_exists('movieId',$this->_params) &&
            !is_null($this->_params['movieId']) ) {

            $comment .= "to download the original science data used to "
                     .      "generate\n"
                     .  "; the Helioviewer.org movie http://helioviewer."
                     .      "org/?movieId="
                     .   $this->_params['movieId'] . "\n;";
        } else {
            $comment .= "to download original science data.\n;";
        }

        return $comment;
    }

    private function _getEITSnippet() {
        $string = <<<EOD

;
; EIT data - downloadable via the VSO
;
EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer) {
            if ( $layer['uiLabels'][1] == 'EIT' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, instrument='{$layer['uiLabels'][1]}', wave='{$layer['uiLabels'][2]}')
b_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
        }
        if ($count == 0) {
            $string = '';
        }

        return $string;
    }

    private function _getLASCOSnippet() {
        $string = <<<EOD

;
; LASCO data - downloadable via the VSO
;

EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer ) {
            if ( $layer['uiLabels'][1] == 'LASCO' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, instrument='{$layer['uiLabels'][1]}', detector='{$layer['uiLabels'][2]}')
b_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
        }
        if ( $count == 0 ) {
            $string = '';
        }

        return $string;
    }

    private function _getMDISnippet() {
        $string = <<<EOD

;
; MDI data - downloadable via the VSO
;

EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer) {
            if ( $layer['uiLabels'][1] == 'MDI' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }


                if ( $layer['uiLabels'][2] == 'continuum' ) {
                    $physobs_str = ", physobs='intensity'";
                }
                else if ( $layer['uiLabels'][2] == 'magnetogram' ) {
                    $physobs_str = ", physobs='los_magnetic_field'";
                }

                $string .= <<<EOD

a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, instrument='{$layer['uiLabels'][1]}'{$physobs_str})
b_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
        }
        if ($count == 0) {
            $string = '';
        }

        return $string;
    }

    private function _getSTEREOSnippet() {
        $string = <<<EOD

;
; STEREO data - downloadable via the VSO
;

EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer ) {
            $observatory = str_replace('-','',$layer['uiLabels'][0]);
            if ( $layer['uiLabels'][2] == 'EUVI' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                            .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]}_{$layer['uiLabels'][3]} = vso_search(tstart, tend, $
    source='{$layer['uiLabels'][0]}', instrument='{$layer['uiLabels'][1]}', $
    detector='{$layer['uiLabels'][2]}', wave='{$layer['uiLabels'][3]}')
b_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]}_{$layer['uiLabels'][3]} = vso_get( a_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]}_{$layer['uiLabels'][3]} )

EOD;
            }
            else if ( $layer['uiLabels'][2] == 'COR1' ||
                      $layer['uiLabels'][2] == 'COR2' ) {

                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, $
    source='{$layer['uiLabels'][0]}', instrument='{$layer['uiLabels'][1]}', detector='{$layer['uiLabels'][2]}')
b_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$observatory}_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
        }
        if ($count == 0) {
            $string = '';
        }

        return $string;
    }

    private function _getSWAPSnippet() {
        $string = <<<EOD

;
; SWAP data - downloadable via the VSO
;

EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer) {
            if ( $layer['uiLabels'][1] == 'SWAP' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                            .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$layer['uiLabels'][1]} = vso_search(tstart, tend, instrument='SWAP', wave='{$layer['uiLabels'][2]}')
b_{$layer['uiLabels'][1]} = vso_get( a_{$layer['uiLabels'][1]} )

EOD;
            }
        }
        if ($count == 0) {
            $string = '';
        }

        return $string;
    }

    private function _getYohkohSnippet() {
        $string = <<<EOD

;
; Yohkoh data - downloadable via the VSO
;

EOD;
        $count = 0;
        foreach ( $this->_imageLayers as $i=>$layer) {
            if ( $layer['uiLabels'][1] == 'SXT' ) {
                $count++;

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

a_{$layer['uiLabels'][1]} = vso_search(tstart, tend, source='YOHKOH', instrument='{$layer['uiLabels'][1]}')
b_{$layer['uiLabels'][1]} = vso_get( a_{$layer['uiLabels'][1]} )

EOD;
                break;
            }
        }
        if ($count == 0) {
            $string = '';
        }

        return $string;
    }

    private function _getSDOSnippet() {
        $AIAwaves = array();
        $HMIwaves = array();
        foreach ( $this->_imageLayers as $i=>$layer ) {
            if ( $layer['uiLabels'][1] == 'AIA' ) {
                $AIAwaves[] = $layer['uiLabels'][2];
            }
            else if ( $layer['uiLabels'][1] == 'HMI' ) {

                if ( $layer['uiLabels'][2] == 'magnetogram' ) {
                    $wave = 'mag';
                }
                else if ( $layer['uiLabels'][2] == 'continuum' ) {
                    $wave = 'cont';
                }

                $HMIwaves[]  = $wave;
            }
        }

        if ( count($AIAwaves) == 0 && count($HMIwaves) == 0 ) {
            return '';
        }

        $AIAwaves = implode(',', $AIAwaves);
        $HMIwaves = implode(',', $HMIwaves);


        list($xcen, $ycen, $fovx, $fovy) = $this->_getCutoutParams();

        $string = <<<EOD


;
; SDO data
;

repeat begin
    print, ' '
    print, 'You have requested data from SDO-AIA and/or SDO-HMI.'
    print, ' '
    print, 'Data requests from these instruments are typically very large.'
    print, 'This script gives you a choice as to how you may acquire these data.'
    print, ' '
    print, '(1) Use the LMSAL AIA/HMI cutout service.'
    print, '   - this option will return AIA/HMI data covering ONLY the area of the Sun you were'
    print, '     observing using Helioviewer.org.  This option requires you to enter an email address so the'
    print, '     cutout service can tell you when your data are ready.  Use this option if you want to'
    print, '     minimize the amount of data you want to download.'
    print, '(2) Use the VSO.'
    print, '   - this option will return full disk AIA/HMI data which therefore includes the area of the Sun'
    print, '     you were observing using Helioviewer.org. Use this option if you need the full disk data.'
    print, '     This will result in typically large downloads of data.'
    print, ' '
    print, "Please enter '1' or '2' to select your download preference."
    read, choice
endrep until (choice eq 1) or (choice eq 2)


if choice eq 1 then begin

    email_address = '';
    read, email_address, PROMPT='Enter your email address: '

EOD;

        foreach ( $this->_imageLayers as $i=>$layer ) {
            if ( $layer['uiLabels'][1] == 'AIA' ) {

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

    tstart = '{$tstart}'
    tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

    ssw_cutout_service, tstart, tend, $
        xcen={$xcen}, $
        ycen={$ycen}, $
        fovx={$fovx}, $
        fovy={$fovy}, $
        instr='AIA', $
        waves='{$layer['uiLabels'][2]}', $
        email=email_address, query, server_response

EOD;
            }

            if ( $layer['uiLabels'][1] == 'HMI' ) {

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

    tstart = '{$tstart}'
    tend   = '{$tend}'

EOD;
                }

                $string .= <<<EOD

    ssw_cutout_service, tstart, tend, $
        xcen={$xcen}, $
        ycen={$ycen}, $
        fovx={$fovx}, $
        fovy={$fovy}, $
        instr='HMI', $
        waves='{$layer['uiLabels'][2]}', $
        email=email_address, query, server_response

EOD;

            }
        }


        $string .= <<<EOD

endif


if choice eq 2 then begin

EOD;

        foreach ( $this->_imageLayers as $i=>$layer ) {
            if ( $layer['uiLabels'][1] == 'AIA' ) {

                if ( is_null($this->_tend) ) {
                    $tstart = $tend = str_replace('/','-',$layer['subDate'])
                                    .' '.$layer['subTime'];
                    $string .= <<<EOD

    tstart = '{$tstart}'
    tend   = '{$tend}'

EOD;

                }

                $string .= <<<EOD

    a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, instrument='{$layer['uiLabels'][1]}', wave='{$layer['uiLabels'][2]}')
    b_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
            else if ( $layer['uiLabels'][1] == 'HMI' ) {
                if ( $layer['uiLabels'][2] == 'continuum' ) {
                    $physobs_str = ", physobs='intensity'";
                }
                else if ( $layer['uiLabels'][2] == 'magnetogram' ) {
                    $physobs_str = ", physobs='los_magnetic_field'";
                }

                $string .= <<<EOD

    a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_search(tstart, tend, instrument='{$layer['uiLabels'][1]}'{$physobs_str})
    b_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} = vso_get( a_{$layer['uiLabels'][1]}_{$layer['uiLabels'][2]} )

EOD;
            }
        }

        $string .= "\nendif\n\n";
        return $string;
    }

    private function _getHEKSnippet() {
        $eventTypeString   = '';
        $kbArchividString  = '';
        $additional_params = '';
        $frmString         = '';

        if ( count($this->_eventLayers) == 0 ||
            (count($this->_eventLayers) == 1 &&
             $this->_eventLayers[0]['frms'] == null) ) {

            return '';
        }

        if ( $this->_kb_archivid != '' ) {
            $additional_params = ",search_array=['kb_archivid="
                               . $this->_kb_archivid . "']";

            $kbArchividString = <<<EOD


hek_query_kb_archivid = ssw_her_make_query(tstart,tend,search_array=['kb_archivid={$this->_kb_archivid}'])
hek_event_kb_archivid = ssw_her_query(hek_query_kb_archivid)

EOD;
        }
        else {
            $frm_all_array = Array();

            foreach ( $this->_eventLayers as $i=>$layer ) {

                if ( $layer['frms'] == 'all' ) {
                    $frm_all_array[] = $layer['event_type'];
                }
                else {
                    $frmString = '';
                    $frmArray = explode(',', $layer['frms']);

                    foreach($frmArray as $j=>$frm) {

                        $frm_decoded = str_replace('_',' ',$frm);

                        $frmString .= <<<EOD

hek_query_{$layer['event_type']}_{$frm} = ssw_her_make_query(tstart,tend,FRM_NAME='{$frm_decoded}', /{$layer['event_type']})
hek_events_{$layer['event_type']}_{$frm} = ssw_her_query(hek_query_{$layer['event_type']}_{$frm})

EOD;
                    }
                }
            }
            $event_types = implode(', /',$frm_all_array);
            if ( strlen($event_types) > 0 ) {
                $event_types = ', /'.$event_types;

                $eventTypeString = <<<EOD

hek_query  = ssw_her_make_query(tstart,tend{$event_types})
hek_events = ssw_her_query(hek_query)

EOD;
            }
        }

        $string = <<<EOD

;
; Feature/Event data - downloadable via the HEK
;

EOD;



        if ( is_null($this->_tend) ) {
            $tstart = $tend = $this->_tstart;
            $string .= <<<EOD

tstart = '{$tstart}'
tend   = '{$tend}'

EOD;
        }

        $string .= $kbArchividString;
        $string .= $frmString;
        $string .= $eventTypeString;


        return $string;
    }
}
?>
