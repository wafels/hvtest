<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * Movie_HelioviewerMovie Class Definition
 *
 * PHP version 5
 *
 * @category Movie
 * @package  Helioviewer
 * @author   Jaclyn Beck <jabeck@nmu.edu>
 * @license  http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License 1.1
 * @link     http://launchpad.net/helioviewer.org
 */
require_once 'HelioviewerMovieFrame.php';
require_once 'src/Database/DbConnection.php';
require_once 'lib/phpvideotoolkit/config.php';
require_once 'lib/phpvideotoolkit/phpvideotoolkit.php5.php';
/**
 * Represents a static (e.g. ogv/mp4) movie generated by Helioviewer
 *
 * Note: For movies, it is easiest to work with Unix timestamps since that is what is returned
 *       from the database. To get from a javascript Date object to a Unix timestamp, simply
 *       use "date.getTime() * 1000." (getTime returns the number of miliseconds)
 *
 * @category Movie
 * @package  Helioviewer
 * @author   Jaclyn Beck <jabeck@nmu.edu>
 * @license  http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License 1.1
 * @link     http://launchpad.net/helioviewer.org
 */
class Movie_HelioviewerMovie
{
    private $_images = array ();
    private $_imageSize;
    private $_maxFrames;
    private $_startTime;
    private $_endTime;
    private $_timeStep;
    private $_db;
    private $_baseScale = 2.63;
    private $_baseZoom = 10;
    private $_tileSize = 512;
    private $_filetype = "flv";
    private $_highQualityLevel = 100;
    private $_watermarkOptions = "-x 720 -y 965 ";

    /**
     * HelioviewerMovie Constructor
     *
     * @param array  $layers    Layers to use for movie generation. Each layer is a string of the form:
     *                          OBS_INST_DET_MEAS,xstart,xsize,ystart,ysize,hcOffsetx,hcOffsety,opacity
     * @param int    $startTime Requested movie start time (unix timestamp)
     * @param int    $zoomLevel Zoom-level for which the movie was requested at
     * @param int    $numFrames Number of frames to include
     * @param int    $frameRate Number of frames per second
     * @param string $hqFormat  Format to use for high-quality version of the movie
     * @param array  $options   An array with ["edges"] => true/false, ["sharpen"] => true/false
     * @param int    $timeStep  Desired timestep between movie frames in seconds. Default is 86400 seconds, or 1 day.
     * @param array  $imageSize Width and height of each movie frame
     * @param string $filename  Desired filename for the movie
     * @param int    $quality   Movie quality
     */
    public function __construct(
        $layers, $startTime, $zoomLevel, $numFrames, $frameRate, $hqFormat,
        $options, $timeStep, $imageSize, $filename, $quality
    ) {
        // date_default_timezone_set('UTC');
        // $layers is an array of layer information arrays, identified by their layer names.
        // Each layer information array has values for "name", "xRange", "yRange", "hcOffset", and "opacityValue"
        $this->layers = $layers;

        // working directory
        $this->tmpdir = substr(getcwd(), 0, -3) + "tmp";

        // _startTime is a Unix timestamp in seconds.
        $this->_startTime = $startTime;
        $this->zoomLevel  = $zoomLevel;
        $this->numFrames  = $numFrames;
        $this->frameRate  = $frameRate;
        $this->quality    = $quality;
        $this->options    = $options;

        // _timeStep is in seconds
        $this->_timeStep  = $timeStep;
        $this->_imageSize = $imageSize;
        $this->filename   = $filename;

        $this->_endTime = $startTime + ($numFrames * $timeStep);

        $this->padDimensions = $this->_setAspectRatios();
        $this->highQualityFiletype = $hqFormat;
        $this->_db = new Database_DbConnection();
    }

    /**
     * TODO: implement
     *
     * @return void
     */
    public function toMovie()
    {

    }

    /**
     * TODO: implement
     *
     * @return void
     */
    public function toArchive()
    {

    }

    /**
     * TODO: implement
     *
     * @return void
     */
    public function getNumFrames()
    {

    }

    /**
     * Builds the requested movie
     *
     * Makes a temporary directory to store frames in, calculates a timestamp for every frame, gets the closest
     * image to each timestamp for each layer. Then takes all layers belonging to one timestamp and makes a movie frame
     * out of it. When done with all movie frames, phpvideotoolkit is used to compile all the frames into a movie.
     *
     * @return void
     */
    public function buildMovie()
    {
        // Make a temporary directory to store the movie in.
        $now       = time();
        $movieName = "Helioviewer-Movie-" . $this->filename;
        $tmpdir    = HV_TMP_DIR . "/$now/";
        $tmpurl    = HV_TMP_ROOT_URL . "/$now/$movieName." . $this->_filetype;
        mkdir($tmpdir);
        chmod($tmpdir, 0777);

        // Build an array with all timestamps needed when requesting images
        $timeStamps = array();

        // Calculates unix time stamps, successively increasing by the time step
        // (default step is 86400 seconds, or 1 day)
        for ($time = $this->_startTime; $time < $this->_endTime; $time += $this->_timeStep) {
            array_push($timeStamps, $time);
        }

        // Array that holds $closestImage array for each layer
        $layerImages = array();

        // Array to hold timestamps corresponding to each image, and each image's uri
        $closestImage = array();

        foreach ($this->layers as $layer) {
            // $layerInfo will have values Array
            // ("obs_inst_det_meas", xStart, xSize, yStart, ySize, offsetx, offsety, opacity)
            $layerInfo = explode(",", $layer);

            // name is now: 'obs_inst_det_meas'
            $name = $layerInfo[0];

            // closestImage is an associative array the size of numFrames with each entry having:
            // Array('timestamp', 'unix_timestamp', 'timediff', 'timediffAbs', 'uri', 'opacityGrp')
            $closestImage = $this->_getImageTimestamps($name, $timeStamps);

            // layerImages is an associative array the size of the number of layers. An example entry would be:
            // layerImages['SOH_EIT_EIT_304'] = closestImage array.
            // So each entry has an array of the closest images to each timestamp.
            $layerImages[$name] = $closestImage;
        }

        // For each frame, make a composite image of all layers at that timestamp
        for ($frameNum = 0; $frameNum < $this->numFrames; $frameNum++) {
            // images array holds one image from each layer (the closest images to a specific timestamp)
            $images = array();
            $realTimestamps = array();

            foreach ($this->layers as $layer) {
                $layerInfo = explode(",", $layer);

                // name is 'SOH_EIT_EIT_304'
                $name = $layerInfo[0];

                // Chop the name off the array but keep the rest of the information.
                // ranges is an array: [xStart, xSize, yStart, ySize, offsetX, offsetY, opacity]
                $ranges = array_slice($layerInfo, 1);

                $closestImage = $layerImages[$name][$frameNum];

                // $image is now: "uri,xStart,xSize,yStart,ySize,opacity,opacityGrp"
                $image =  $closestImage['uri'] . "," . implode(",", $ranges) . "," .$closestImage['opacityGrp'];
                $images[$name] = $image;
                $realTimestamps[$name] = $closestImage['timestamp'];
            }

            // All frames will be put in cache/movies/$now
            $movieFrame = new Movie_HelioviewerMovieFrame(
                $this->zoomLevel, $this->options, $images, $frameNum, $now,
                $this->_imageSize, $realTimestamps, $this->quality
            );
            $frameFile = $movieFrame->getComposite();

            array_push($this->_images, $frameFile);
        }

        // Pad to a 16:9 aspect ratio by adding a black border around the image.
        // This is set up so that width CAN be padded if it's uncommented. Currently it is not padded.
        foreach ($this->_images as $image) {
            //$imgWidth = $this->_imageSize["width"];
            //$width     = $this->padDimensions["width"];
            //$widthDiff = ($width - $imgWidth) / 2;

            $imgHeight = $this->_imageSize["height"];
            $height = $this->padDimensions["height"];
            $heightDiff = ($height - $imgHeight) / 2;

            if (/*$widthDiff > 0 || */ $heightDiff > 0) {
                $padCmd = ' && convert -bordercolor black -border 0x' . $heightDiff . " " . $image . " " . $image;
                exec(HV_PATH_CMD . escapeshellcmd($padCmd));
            }
        }

        // Use phpvideotoolkit to compile them
        $toolkit = new PHPVideoToolkit($tmpdir);

        // compile the image to the tmp dir
        $ok = $toolkit->prepareImagesForConversionToVideo($this->_images, $this->frameRate);

        if (!$ok) {
            // if there was an error then get it
            logErrorMsg("PHPVideoToolkit: {$toolkit->getLastError()}");
        }

        $toolkit->setVideoOutputDimensions($this->_imageSize['width'], $this->_imageSize['height']);

        // set the output parameters (Flash video)
        $output_filename = "$movieName." . $this->_filetype;
        $ok = $toolkit->setOutput($tmpdir, $output_filename, PHPVideoToolkit::OVERWRITE_EXISTING);

        if (!$ok) {
            //         if there was an error then get it
            logErrorMsg("PHPVideoToolkit: {$toolkit->getLastError()}");
        }

        //     execute the ffmpeg command
        $movie = $toolkit->execute(false, true);

        // check the return value in-case of error
        if ($movie !== PHPVideoToolkit::RESULT_OK) {
            // if there was an error then get it
            logErrorMsg("PHPVideoToolkit: {$toolkit->getLastError()}");
        }

        // Create a high-quality version as well
        $hq_filename = "$movieName." . $this->highQualityFiletype;
        $toolkit->setConstantQuality($this->_highQualityLevel);

        // Use ASF for Windows
        if ($this->highQualityFiletype == "avi") {
            $toolkit->setFormat(PHPVideoToolkit::FORMAT_ASF);
        }

        // Use MPEG-4 for Mac
        if ($this->highQualityFiletype == "mov") {
            $toolkit->setVideoCodec(PHPVideoToolkit::FORMAT_MPEG4);
        }

        // Add a watermark
        //$watermark = HV_ROOT_DIR . "/images/logos/watermark_small_gs.png";
        //$toolkit->addWatermark($watermark, PHPVIDEOTOOLKIT_FFMPEG_IMLIB2_VHOOK, $this->_watermarkOptions);

        $ok = $toolkit->setOutput($tmpdir, $hq_filename, PHPVideoToolkit::OVERWRITE_EXISTING);

        if (!$ok) {
            // if there was an error then get it
            logErrorMsg("PHPVideoToolkit: {$toolkit->getLastError()}");
        }

        // execute the ffmpeg command
        $mp4 = $toolkit->execute(false, true);

        if ($mp4 !== PHPVideoToolkit::RESULT_OK) {
            //         if there was an error then get it
            logErrorMsg("PHPVideoToolkit: {$toolkit->getLastError()}");
        }

        // Clean up png/tif images that are no longer needed
        foreach ($this->_images as $image) {
            unlink($image);
        }

        // $this->showMovie($tmpurl, 512, 512);

        header('Content-type: application/json');
        echo json_encode($tmpurl);
    }

    /**
     * Adds black border to movie frames if neccessary to guarantee a 16:9 aspect ratio
     *
     * Checks the ratio of width to height and adjusts each dimension so that the
     * ratio is 16:9. The movie will be padded with a black background in JP2Image.php
     * using the new width and height.
     *
     * @return array Width and Height of padded movie frames
     */
    private function _setAspectRatios()
    {
        $width  = $this->_imageSize["width"];
        $height = $this->_imageSize["height"];

        $ratio = $width / $height;

        // Commented out because padding the width looks funny.
        /*
        // If width needs to be adjusted but height is fine
        if ($ratio < 16/9) {
            $adjust = (16/9) * $height / $width;
            $width *= $adjust;
        }
        */
        // Adjust height if necessary
        if ($ratio > 16/9) {
            $adjust = (9/16) * $width / $height;
            $height *= $adjust;
        }

        $dimensions = array("width" => $width, "height" => $height);
        return $dimensions;
    }

    /**
     * Find closest times for each frame of the movie for a given layer
     *
     * Queries the database to find the exact timestamps for images nearest each time in $timeStamps.
     * Returns an array the size of numFrames that has:
     *     'timestamp', 'unix_timestamp', 'timediff', 'timediffAbs', 'uri', and 'opacityGrp'
     * for each image.
     *
     * @param string $name       JP2 filename
     * @param array  $timeStamps Array containing the requested timeStamps to match against
     *
     * @return array Matched times
     */
    private function _getImageTimestamps($name, $timeStamps) //($obs, $inst, $det, $meas, $timeStamps)
    {
        $resultArray = array ();

        // Go through the array and find the closest image in the database to the given timeStamp
        if ($timeStamps) {
            foreach ($timeStamps as $time) {
                // sprintf takes too long, especially when it is called 40+ times.
                $sql = "SELECT
                            DISTINCT timestamp,
                            UNIX_TIMESTAMP(timestamp) AS unix_timestamp,
                            UNIX_TIMESTAMP(timestamp) - $time AS timediff,
                            ABS(UNIX_TIMESTAMP(timestamp) - $time) AS timediffAbs,
                            uri,
                            opacityGrp
                        FROM
                            image
                        WHERE
                            uri
                        LIKE
                            '%_%_%_%_" . mysqli_real_escape_string($this->_db->link, $name) . ".jp2'
                        ORDER BY
                            timediffAbs
                        LIMIT 0,1";
                try {
                    $result = $this->_db->query($sql);
                    $row = mysqli_fetch_array($result, MYSQL_ASSOC);
                    if (!$row) {
                        throw new Exception("Could not find the requested image.");
                    }
                }
                catch (Exception $e) {
                    logErrorMsg($e->getMessage);
                }

                array_push($resultArray, $row);
            }
        }

        return $resultArray;
    }

    /**
     * Displays movie in a Flash player along with a link to the high-quality version
     *
     * @param string $url    The URL for the movie to be displayed
     * @param int    $width  Movie width
     * @param int    $height Movie Height
     *
     * @return void
     */
    public function showMovie($url, $width, $height)
    {
        ?>
        <!-- MC Media Player -->
        <script type="text/javascript">
            playerFile = "http://www.mcmediaplayer.com/public/mcmp_0.8.swf";
            fpFileURL = "<?php print $url?>";
            playerSize = "<?php print $width . 'x' . $height?>";
        </script>
        <script type="text/javascript" src="http://www.mcmediaplayer.com/public/mcmp_0.8.js">
        </script>
        <!-- / MC Media Player -->
        <?php
    }
}
?>
